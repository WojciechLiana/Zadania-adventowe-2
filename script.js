// day 2/1 - ok
/*
let data =[1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,6,19,23,2,23,6,27,2,6,27,31,2,13,31,35,1,10,35,39,2,39,13,43,1,43,13,47,1,6,47,51,1,10,51,55,2,55,6,59,1,5,59,63,2,9,63,67,1,6,67,71,2,9,71,75,1,6,75,79,2,79,13,83,1,83,10,87,1,13,87,91,1,91,10,95,2,9,95,99,1,5,99,103,2,10,103,107,1,107,2,111,1,111,5,0,99,2,14,0,0];
let data2 = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,6,19,23,2,23,6,27,2,6,27,31,2,13,31,35,1,10,35,39,2,39,13,43,1,43,13,47,1,6,47,51,1,10,51,55,2,55,6,59,1,5,59,63,2,9,63,67,1,6,67,71,2,9,71,75,1,6,75,79,2,79,13,83,1,83,10,87,1,13,87,91,1,91,10,95,2,9,95,99,1,5,99,103,2,10,103,107,1,107,2,111,1,111,5,0,99,2,14,0,0];
let fours = 0;
let fours2;
let help = 0;

do{

    if(data[fours] == 1){
        help = data[data[fours +1]] + data[data[fours +2]];
        data[data[fours +3]] = help;
    }
    else if(data[fours] == 2){
        help = data[data[fours +1]] * data[data[fours +2]];
        data[data[fours +3]] = help;
    }
    fours += 4;
    if(data[fours] == 99){
        console.log(data[0]);
    }
}
while (data[fours] != 99);

// day 2/2 - ok

for(let i=0; i<100; i++){
    for(let j=0; j<100; j++){
        let data3 = data2.slice();
        data3[1] = i;
        data3[2] = j;
        fours2 = 0;

        do{
            if(data3[fours2] == 1){
                help = data3[data3[fours2 +1]] + data3[data3[fours2 +2]];
                data3[data3[fours2 +3]] = help;
            }
            else if(data3[fours2] == 2){
                help = data3[data3[fours2 +1]] * data3[data3[fours2 +2]];
                data3[data3[fours2 +3]] = help;
            }
            fours2 += 4;
            if(data3[0] == 19690720){
                console.log('noun: '+data3[1] + ' verb: ' + data3[2]  + ' wynik: ' + (100*data3[1]+data3[2]));
            }

        }
        while (data3[fours2] != 99 );


    }
}
*/


// day 3/1 - ok

/*
let line1 = 'R1009,U993,L383,D725,R163,D312,R339,U650,R558,U384,R329,D61,L172,D555,R160,D972,L550,D801,L965,U818,L123,D530,R176,D353,L25,U694,L339,U600,L681,D37,R149,D742,R762,U869,R826,U300,L949,U978,L303,U361,R136,D343,L909,U551,R745,U913,L566,D292,R820,U886,R205,D431,L93,D71,R577,U872,L705,U510,L698,U963,R607,U527,L669,D543,R690,U954,L929,D218,R490,U500,L589,D332,R949,D538,R696,U659,L188,U468,L939,U833,L445,D430,R78,D303,R130,D649,R849,D712,L511,U745,R51,U973,R799,U829,R605,D771,L837,U204,L414,D427,R538,U116,R540,D168,R493,U900,L679,U431,L521,D500,L428,U332,L954,U717,L853,D339,L88,U807,L607,D496,L163,U468,L25,U267,L759,D898,L591,U445,L469,U531,R596,D486,L728,D677,R350,D429,R39,U568,R92,D875,L835,D841,R877,U178,L221,U88,R592,U692,R455,U693,L419,U90,R609,U672,L293,U168,R175,D456,R319,D570,R504,D165,L232,D624,L604,D68,R807,D59,R320,D281,L371,U956,L788,D897,L231,D829,R287,D798,L443,U194,R513,D925,L232,U225,L919,U563,R448,D889,R661,U852,L950,D558,L269,U186,L625,U673,L995,U732,R435,U849,L413,D690,L158,D234,R361,D458,L271,U90,L781,U754,R256,U162,L842,U927,L144,D62,R928,D238,R473,U97,L745,U303,L487,D349,L520,D31,L825,U385,L133,D948,L39,U62,R801,D664,L333,U134,R692,U385,L658,U202,L279,D374,R489,D686,L182,U222,R733,U177,R94,D603,L376,U901,R216,D851,L155,D214,L460,U758,R121,D746,L180,U175,L943,U146,L166,D251,L238,U168,L642,D341,R281,U182,R539,D416,R553,D67,L748,U272,R257,D869,L340,U180,R791,U138,L755,D976,R731,U713,R602,D284,L258,U176,R509,U46,R935,U576,R96,U89,L913,U703,R833';
let line2 = 'L1006,D998,R94,D841,R911,D381,R532,U836,L299,U237,R781,D597,L399,D800,L775,D405,L485,U636,R589,D942,L878,D779,L751,U711,L973,U410,L151,U15,L685,U417,L106,D648,L105,D461,R448,D743,L589,D430,R883,U37,R155,U350,L421,U23,R337,U816,R384,D671,R615,D410,L910,U914,L579,U385,R916,U13,R268,D519,R289,U410,L389,D885,L894,U734,L474,U707,L72,U155,L237,U760,L127,U806,L15,U381,L557,D727,L569,U320,L985,D452,L8,D884,R356,U732,L672,D458,L485,U402,L238,D30,R644,U125,R753,U183,L773,U487,R849,U210,L164,D808,L595,D668,L340,U785,R313,D72,L76,D263,R689,U604,R471,U688,R462,D915,R106,D335,R869,U499,R190,D916,R468,D882,R56,D858,L143,D741,L386,U856,R50,U853,R151,D114,L773,U854,L290,D344,L23,U796,L531,D932,R314,U960,R643,D303,L661,D493,L82,D491,L722,U848,L686,U4,L985,D509,L135,D452,R500,U105,L326,D101,R222,D944,L645,D362,L628,U305,L965,U356,L358,D137,R787,U728,R967,U404,R18,D928,L695,D965,R281,D597,L791,U731,R746,U163,L780,U41,L255,U81,L530,D964,R921,D297,R475,U663,L226,U623,L984,U943,L143,U201,R926,U572,R343,U839,R764,U751,R128,U939,R987,D108,R474,U599,R412,D248,R125,U797,L91,D761,L840,U290,L281,U779,R650,D797,R185,D320,L25,U378,L696,U332,R75,D620,L213,D667,R558,U267,L846,U306,R939,D220,R311,U827,R345,U534,R56,D679,R48,D845,R898,U8,R862,D960,R753,U319,L886,D795,R805,D265,R876,U729,R894,D368,R858,U744,R506,D327,L903,U919,L721,U507,L463,U753,R775,D719,R315,U128,R17,D376,R999,D386,L259,U181,L162,U605,L265,D430,R35,D968,R207,U466,R796,D667,R93,U749,L315,D410,R312,U929,L923,U260,R638';

// dziele dane na tabele
const v1 = line1.split(",");
const v2 = line2.split(",");

const pointer2 = [0,0];
const pointer1 = [0,0];

let path2 = [];
let path1 = [];
const path = function(move, path, pointer){
    var cells= parseInt(move.substr(1)); // pobieram ilosc krokow
    if(move[0] == 'L'){ // sprawdzam kierunek
        for(let a=pointer[0]-1; a >= (pointer[0]-cells); a--){ // wykonuje odpowiednia ilosc krokow w odpowiednim kierunku
            path.push((a)+" " + pointer[1]);
        }
        pointer[0] = pointer[0]- cells;
    }
    if(move[0] == 'R'){
        for(let a=pointer[0]+1; a <= (pointer[0]+cells); a++){
            path.push((a)+" " + pointer[1]);
        }
        pointer[0] += cells;
    }
    if(move[0] == 'U'){
        for(let a=pointer[1]+1; a <= pointer[1]+cells; a++){
            path.push(pointer[0]+" " +(a));
        }
        pointer[1] += (cells);
    }
    if(move[0] == 'D'){
        for(let a=pointer[1]-1; a >= pointer[1]-cells; a--){
            path.push(pointer[0]+" " +(a));
        }
        pointer[1] = pointer[1]- cells;
    }
}
for(let b=0; b<v2.length; b++){
    path(v2[b], path2, pointer2);
}
for(let z=0; z<v1.length; z++){
    path(v1[z], path1, pointer1);
}

const distance = [];
for(let i=0; i<path1.length;i++){
    if(path2.indexOf(path1[i]) != -1){
        distance.push(path1[i]);
    }
}
console.log(distance); //answer in table
*/

// day 3/2 - ok - nie dziala laczone z 3/1
/*

let line1 = 'R1009,U993,L383,D725,R163,D312,R339,U650,R558,U384,R329,D61,L172,D555,R160,D972,L550,D801,L965,U818,L123,D530,R176,D353,L25,U694,L339,U600,L681,D37,R149,D742,R762,U869,R826,U300,L949,U978,L303,U361,R136,D343,L909,U551,R745,U913,L566,D292,R820,U886,R205,D431,L93,D71,R577,U872,L705,U510,L698,U963,R607,U527,L669,D543,R690,U954,L929,D218,R490,U500,L589,D332,R949,D538,R696,U659,L188,U468,L939,U833,L445,D430,R78,D303,R130,D649,R849,D712,L511,U745,R51,U973,R799,U829,R605,D771,L837,U204,L414,D427,R538,U116,R540,D168,R493,U900,L679,U431,L521,D500,L428,U332,L954,U717,L853,D339,L88,U807,L607,D496,L163,U468,L25,U267,L759,D898,L591,U445,L469,U531,R596,D486,L728,D677,R350,D429,R39,U568,R92,D875,L835,D841,R877,U178,L221,U88,R592,U692,R455,U693,L419,U90,R609,U672,L293,U168,R175,D456,R319,D570,R504,D165,L232,D624,L604,D68,R807,D59,R320,D281,L371,U956,L788,D897,L231,D829,R287,D798,L443,U194,R513,D925,L232,U225,L919,U563,R448,D889,R661,U852,L950,D558,L269,U186,L625,U673,L995,U732,R435,U849,L413,D690,L158,D234,R361,D458,L271,U90,L781,U754,R256,U162,L842,U927,L144,D62,R928,D238,R473,U97,L745,U303,L487,D349,L520,D31,L825,U385,L133,D948,L39,U62,R801,D664,L333,U134,R692,U385,L658,U202,L279,D374,R489,D686,L182,U222,R733,U177,R94,D603,L376,U901,R216,D851,L155,D214,L460,U758,R121,D746,L180,U175,L943,U146,L166,D251,L238,U168,L642,D341,R281,U182,R539,D416,R553,D67,L748,U272,R257,D869,L340,U180,R791,U138,L755,D976,R731,U713,R602,D284,L258,U176,R509,U46,R935,U576,R96,U89,L913,U703,R833';
let line2 = 'L1006,D998,R94,D841,R911,D381,R532,U836,L299,U237,R781,D597,L399,D800,L775,D405,L485,U636,R589,D942,L878,D779,L751,U711,L973,U410,L151,U15,L685,U417,L106,D648,L105,D461,R448,D743,L589,D430,R883,U37,R155,U350,L421,U23,R337,U816,R384,D671,R615,D410,L910,U914,L579,U385,R916,U13,R268,D519,R289,U410,L389,D885,L894,U734,L474,U707,L72,U155,L237,U760,L127,U806,L15,U381,L557,D727,L569,U320,L985,D452,L8,D884,R356,U732,L672,D458,L485,U402,L238,D30,R644,U125,R753,U183,L773,U487,R849,U210,L164,D808,L595,D668,L340,U785,R313,D72,L76,D263,R689,U604,R471,U688,R462,D915,R106,D335,R869,U499,R190,D916,R468,D882,R56,D858,L143,D741,L386,U856,R50,U853,R151,D114,L773,U854,L290,D344,L23,U796,L531,D932,R314,U960,R643,D303,L661,D493,L82,D491,L722,U848,L686,U4,L985,D509,L135,D452,R500,U105,L326,D101,R222,D944,L645,D362,L628,U305,L965,U356,L358,D137,R787,U728,R967,U404,R18,D928,L695,D965,R281,D597,L791,U731,R746,U163,L780,U41,L255,U81,L530,D964,R921,D297,R475,U663,L226,U623,L984,U943,L143,U201,R926,U572,R343,U839,R764,U751,R128,U939,R987,D108,R474,U599,R412,D248,R125,U797,L91,D761,L840,U290,L281,U779,R650,D797,R185,D320,L25,U378,L696,U332,R75,D620,L213,D667,R558,U267,L846,U306,R939,D220,R311,U827,R345,U534,R56,D679,R48,D845,R898,U8,R862,D960,R753,U319,L886,D795,R805,D265,R876,U729,R894,D368,R858,U744,R506,D327,L903,U919,L721,U507,L463,U753,R775,D719,R315,U128,R17,D376,R999,D386,L259,U181,L162,U605,L265,D430,R35,D968,R207,U466,R796,D667,R93,U749,L315,D410,R312,U929,L923,U260,R638';
// let line1 = 'D2,L3,U5';
// let line2 = 'U2,L2,D5';

// dziele dane na tabele
const v1 = line1.split(",");
const v2 = line2.split(",");

// z poprzedniego zadania, zeby za dlugo sie nie liczylo
const output = ["339 0", "1013 -1399", "531 -1399", "488 -1384", "488 -1147", "541 -1147", "531 -1464", "516 -1384", "516 -1147", "342 -770", "249 -770", "177 -767", "177 -439", "177 -357", "-103 -170", "-362 -170", "-362 -207", "-355 -293", "-355 -439", "-355 -792", "-122 -949", "249 -949", "342 -949"];

const pointer2 = [0, 0];
const pointer1 = [0, 0];

const distance1 = [];
const distance2 = [];

const counter1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const counter2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

// sciezka tu bedzie

let path2 = [];
let path1 = [];
const path = function (move, path, pointer, distance, counter) {
    var cells = parseInt(move.substr(1)); // pobieram ilosc krokow
    if (move[0] == 'L') { // sprawdzam kierunek
        for (let a = pointer[0] - 1; a >= (pointer[0] - cells); a--) { // wykonuje odpowiednia ilosc krokow w odpowiednim kierunku
            for (let g = 0; g < 23; g++) {
                counter[g] += 1;
            }
            path.push((a) + " " + pointer[1]);
            if ((output.indexOf((a) + " " + pointer[1])) != -1) {
                counter[(output.indexOf((a) + " " + pointer[1]))] += 'a';
            }
        }

        pointer[0] = pointer[0] - cells;  // zmieniam wspolrzedna wskaznika, przesowa sie
    }
    if (move[0] == 'R') {
        for (let a = pointer[0] + 1; a <= (pointer[0] + cells); a++) {
            path.push((a) + " " + pointer[1]);
            for (let g = 0; g < 23; g++) {
                counter[g] += 1;
            }
            if ((output.indexOf((a) + " " + pointer[1])) != -1) {
                counter[(output.indexOf((a) + " " + pointer[1]))] += 'a';
            }
        }

        pointer[0] += cells;
    }
    if (move[0] == 'U') {
        for (let a = pointer[1] + 1; a <= pointer[1] + cells; a++) {
            path.push(pointer[0] + " " + (a));
            for (let g = 0; g < 23; g++) {
                counter[g] += 1;
            }
            if ((output.indexOf(pointer[0] + " " + (a))) != -1) {
                counter[(output.indexOf(pointer[0] + " " + (a)))] += 'a';
            }
        }
        pointer[1] += (cells);
    }
    if (move[0] == 'D') {
        for (let a = pointer[1] - 1; a >= pointer[1] - cells; a--) {
            path.push(pointer[0] + " " + (a));
            for (let g = 0; g < 23; g++) {
                counter[g] += 1;
            }
            if ((output.indexOf(pointer[0] + " " + (a))) != -1) {
                counter[(output.indexOf(pointer[0] + " " + (a)))] += a;
            }
        }
        pointer[1] = pointer[1] - cells;
    }
}


for (let b = 0; b < v2.length; b++) {
    path(v2[b], path2, pointer2, distance2, counter2);
}
for (let z = 0; z < v1.length; z++) {
    path(v1[z], path1, pointer1, distance1, counter1);
}

const final = [];
const final2 = [];
for (let r = 0; r < 23; r++) {
    final[r] = parseInt(counter1[r].toString().substr(0, 6)) + parseInt(counter2[r].toString().substr(0, 6));
}

console.log(final.sort((a, b) => a - b)[0]);

//15622
*/

// day 4/1 zrobione, 4/2 last check - ok
/*

let first = 206938;
let last = 679128;
let last2= '';
let counter =0;

let lastcheck = function(tekst){
    for(let j=0; j<6; j++){
        if(parseInt(last2[j])==parseInt(last2[j+1]) && parseInt(last2[j])!=parseInt(last2[j-1])&& parseInt(last2[j+1])!=parseInt(last2[j+2])){
            counter ++;
            return 0;
        }
    }
}

for(let i=first; i<last; i++){
    last2= i+'';
    if(parseInt(last2[0])<=parseInt(last2[1]) && parseInt(last2[1])<=parseInt(last2[2]) && parseInt(last2[2])<=parseInt(last2[3]) && parseInt(last2[3])<=parseInt(last2[4]) && parseInt(last2[4])<=parseInt(last2[5])){
        if(parseInt(last2[0])==parseInt(last2[1]) || parseInt(last2[1])==parseInt(last2[2]) || parseInt(last2[2])==parseInt(last2[3]) || parseInt(last2[3])==parseInt(last2[4]) || parseInt(last2[4])==parseInt(last2[5])){
            lastcheck(last2);
        }
    }
}

console.log(counter);
*/


//day 8/1 - ok
/*

let input
let layers = [];

// robie sobie tablice z warstwami
for(let i=0; i<100; i++){
    layers[i] = input.substr(i*150, 150);
}

// a teraz funkcje liczaca ile warstwa ma elementow podanych w parametrze

let counter3;

const checklayer = function(layer, findThis){
    counter3 =0;
    for(let g=0; g<150; g++){
        if(layer[g] == findThis){
            counter3++;
        }
    }
    return counter3;
}

// szukam pasujacej warstwy z najmniejsza liczba 0
let bestlayer = 0;

for(let i=0; i<100; i++){
    if(checklayer(layers[bestlayer], 0) > checklayer(layers[i], 0)){
        bestlayer = i;
    }
}
// obliczam i pokazuje wynik
console.log("wynik to: " + (checklayer(layers[bestlayer], 1) * checklayer(layers[bestlayer], 2)) );


// day 8/2 - ok

// zaczne od funkcji sprawdzajacej czy mam juz dobry obraz
let countLayer = 0;

let verifylayer = function(layer) {

    for (let i = 0; i < 150; i++) {
        if (layer[i] != 2) {
            countLayer++;
        }
    }
    if(countLayer == 150){
        return layer[i];
    }
}

// a teraz funkcja podmieniajaca 2, na liczbe z kolejnej warstwy

let layerChanger = function(toChange, fromChange){
    for(let i=0; i<150; i++){
        if(toChange[i] == 2){
            toChange[i] = fromChange[i];
        }
    }
}

// moje warstwy sa stringami, zamienie pierwsza na tablice
let finalLayer = [];

for(let i=0; i<150; i++){
    finalLayer[i] = layers[0][i];
}

// ostateczne dzialanie

for(let z= 0; z<100; z++){
    verifylayer(finalLayer);
    layerChanger(finalLayer, layers[z]);
}

//wyswietlenie wyniku
console.log(finalLayer.join(''));

/*  // wynik
1111011110100001110010001
0001010000100001001010001
0010011100100001110001010
0100010000100001001000100
1000010000100001001000100
1111010000111101110000100
 */

// day 10/1 - cos nie dziala
/*
const asteroids = '.###.###.###.#####.######.##.###..###..#.#...####.###.############.###.####.#########..###..#########.##.###########.#.###.###.######..#.#.#.#.##.###.#.####.#####..#.#.##.############.#######.###..##.###.###.##.##..####..##.####.##########.#######.##.###.##########.##..####.#######.#.#####.##.#.#..############.#######.#.##..#####.#####..######..#####.###.#######.#.############.####.#.#.##########.';
const asteroids2 ='.#..##.###...#########.############..##..#.######.########.#.###.#######.####.#.#####.##.#.##.###.##..#####..#.##############################.####....###.#.#.####.######################.##.###..####....######..##.###########.##.####...##..#.#####..#.######.#####...#.##########...#.##########.#######.####.#.###.###.#.##....##.##.###..#####.#.#.###########.####.#.#.#####.####.######.##.####.##.#..##';
// zmieniam sobie stringa na tablice
const reduceFunc = (acc, curr) => {
    const arrToPushIndex = acc.findIndex(elem => elem.length < 20);

    if (arrToPushIndex === -1) {
        acc.push([curr]);
    } else {
        acc[arrToPushIndex].push(curr);
    }
    return acc;
}
const asteroidsMap = [...asteroids].reduce(reduceFunc,[]);

//policze kat nachylenia miedzy badanym punktem a cala reszta


// funkcja zwraca wspolczynnik 'a' prostej
// a i b wspolrzedne jednego punktu c i d drugiego
let angles = (a, b, c, d) => (d-b)/(c-a);

// teraz trzeba wpisac wspolczynniki do tablicy dla kazdej asteroidy
// xxx i yyy to pozycja aktualnej dla ktorej licze

// const writer2 = asteroidsMap.map(x=> x.map(y=>3)); - moja pierwsza fajna funkcja funkcyjna, zostaje na pamiatke

const writer2 = (xxx, yyy, MapOfAsteroids)=>{
    var output = MapOfAsteroids.map((el, index)=>
        el.map((el2, index2) => {
                if (el2 == '.') {
                    return '.';
                } else if(xxx == index){
                 return 0;
                }
                else {
                    return angles(xxx, yyy, index, index2);
                }
            }
        ));
    return output;
}
// console.log(writer2(13,11, asteroidsMap));

// liczy asteroidy
const countAsteroids2 = (xxx, yyy, MapOfAsteroids) => {
    var counterL = [];
    var counterR = [];
    var output = MapOfAsteroids.map((el, index)=>
        el.map((el2, index2) => {
            if(index2 >= xxx){
                if(! counterR.some(x => x == el2)){
                    counterR.push(el2);
                }
            }
            else{
                if(! counterL.some(x => x == el2)){
                    counterL.push(el2);
                }
            }
        } ));
    return counterL.length + counterR.length;
}

console.log(countAsteroids2(13, 11, writer2(13,11, asteroidsMap)));
// teraz najtrudniejsze chyba, polioczyc te asteroidy


const bestAsteroid = function(asteroidMap){
    const finalMap = asteroidMap.map((el, index)=>
        el.map((el2, index2)=>{
            if(el2 == '#') {
                return countAsteroids2(index, index2, writer2(index, index2, asteroidsMap));
            }else{
                return 0;
            }
        }
    ));
    return finalMap;
}
console.log(bestAsteroid(asteroidsMap));

*/

// day 6/1 & 6/2 -ok

/*
const data = ["RN2)HSX",
    "TYQ)JFL",
    "PBD)P1X",
    "69L)R17",
    "LWG)VPQ",
    "TL1)MC6",
    "LV4)LFV",
    "LGY)LF3",
    "Y8D)CMZ",
    "N5F)CR9",
    "C6M)J97",
    "M39)BZP",
    "MNY)8NQ",
    "NVF)HXQ",
    "FKJ)KP3",
    "5YR)87D",
    "CYL)677",
    "JPT)ZL6",
    "79B)J1Q",
    "JYH)TS6",
    "LJN)QY3",
    "61T)YKQ",
    "3CM)8DT",
    "6FM)D8L",
    "TJ5)G4G",
    "1KL)BGT",
    "371)95C",
    "7VQ)241",
    "GWX)KNY",
    "7NS)VYG",
    "N5J)9K1",
    "VH9)Q3H",
    "4SL)JRQ",
    "6VB)Z96",
    "Z68)YY6",
    "RHD)S1K",
    "FP5)XJH",
    "BWC)98G",
    "JKT)PTH",
    "YKL)THM",
    "TJJ)BXL",
    "VM9)LV1",
    "W8C)P7R",
    "C5J)8SL",
    "7DG)RN2",
    "JQD)KXN",
    "C53)DX6",
    "RST)4DP",
    "652)FG6",
    "1PB)CCQ",
    "KY5)HBS",
    "J68)GZT",
    "GMJ)WLX",
    "ZM1)DFF",
    "38F)S9G",
    "869)TYQ",
    "534)H7C",
    "BXH)YQV",
    "FNP)15P",
    "YKK)F27",
    "925)HTT",
    "1FD)J77",
    "8RN)N35",
    "88J)65N",
    "9DM)CW4",
    "DSH)DXM",
    "QSK)2WM",
    "6DH)C53",
    "544)K2Z",
    "F65)9QT",
    "1H2)8MY",
    "6CS)F61",
    "SD1)82Q",
    "SW2)C5J",
    "96X)3CF",
    "M8G)4VR",
    "QML)XM8",
    "5C1)8R1",
    "2R9)YNZ",
    "PY5)LFR",
    "TL1)ZKK",
    "HHD)794",
    "TKX)LNB",
    "95C)BVL",
    "9NM)8HJ",
    "YKQ)Z29",
    "YMG)388",
    "ZGV)XTB",
    "6PN)F7C",
    "DNQ)GSQ",
    "6T7)GZZ",
    "W3G)9X3",
    "F5T)KL4",
    "4H2)QBC",
    "HQC)GG4",
    "1N7)GH9",
    "JT2)QNR",
    "ZHD)CTW",
    "3SS)9S4",
    "Q3H)2TB",
    "KXN)NV4",
    "13K)9WV",
    "PP1)VWR",
    "1YJ)BGM",
    "6RC)M6W",
    "NYZ)5P6",
    "HTT)HP1",
    "712)PSR",
    "DP8)N9L",
    "B2R)8N1",
    "4VR)FP5",
    "T3X)FCR",
    "PG9)NFN",
    "25P)D1Q",
    "NFK)CV8",
    "KGJ)G5S",
    "QRL)C4N",
    "BDM)F95",
    "Y1T)5C1",
    "WLX)HX3",
    "12X)9TL",
    "BPD)SZJ",
    "GMP)RHF",
    "W4D)YYS",
    "722)JVQ",
    "JJ4)3FG",
    "3FG)X4Q",
    "ZM6)3G3",
    "MC6)L7Q",
    "DPB)M39",
    "MQF)W28",
    "87V)8ZV",
    "7DG)M3Y",
    "1VN)MFS",
    "9Q6)3C9",
    "7MP)17N",
    "Y5M)Y3X",
    "6N3)LTV",
    "VQ3)W8G",
    "QRK)GD2",
    "LNB)LFL",
    "DKF)RL2",
    "1T5)W95",
    "VZ5)K5V",
    "76Q)W4D",
    "QH2)8JR",
    "2WM)S9C",
    "9X1)V35",
    "KZN)YRP",
    "9X5)T47",
    "FPS)TCH",
    "YRJ)Y6B",
    "67X)SFG",
    "D68)YQ6",
    "YKV)B2L",
    "6PN)7FT",
    "KWW)ZQ6",
    "ZTS)2BS",
    "HG6)2B8",
    "9K1)62W",
    "4YH)J98",
    "RRG)FJW",
    "J98)QK3",
    "LRZ)P76",
    "83Y)GXQ",
    "838)X49",
    "4LB)GC3",
    "2R4)DPB",
    "MC4)31H",
    "M8Z)FKJ",
    "8R1)NDM",
    "GNX)GYF",
    "MFL)DL7",
    "WGD)JSX",
    "SGN)TKX",
    "C2D)P6P",
    "LHH)G31",
    "PN6)959",
    "Q4Q)1CD",
    "3GL)82F",
    "MS5)SPX",
    "7GZ)7MC",
    "JRQ)RWY",
    "51T)C2D",
    "9N6)PR9",
    "CTW)Y54",
    "MJW)LJ7",
    "QBC)PW7",
    "NDM)RD5",
    "K85)KWW",
    "HBS)T66",
    "PC2)H7X",
    "MFS)VF9",
    "4J5)X6P",
    "JP8)GF2",
    "7VZ)C3H",
    "6HK)KVS",
    "BKR)96X",
    "QMF)JT2",
    "XDC)FLD",
    "TG3)XDC",
    "CCQ)CH7",
    "48C)CTS",
    "9WV)1YK",
    "31G)M8Z",
    "RYN)HV3",
    "WC6)9DH",
    "H7C)XT5",
    "36P)SX4",
    "P28)RWX",
    "H7C)L59",
    "P3K)RKB",
    "HP3)MS5",
    "Y1F)X6X",
    "LZV)F4K",
    "6TR)33Y",
    "YQ6)N8D",
    "MMP)6NJ",
    "4R8)J47",
    "9JV)JF2",
    "15R)ZQP",
    "CH7)31G",
    "FJW)1KF",
    "YSV)G5C",
    "LKV)C6M",
    "W28)HP3",
    "33Y)MQF",
    "V35)PN6",
    "24J)6PN",
    "ZJ1)QH2",
    "BGT)S8W",
    "61W)MD5",
    "GZZ)M6B",
    "FCR)427",
    "RD5)WGD",
    "72B)9Q6",
    "62W)51T",
    "82Q)CQH",
    "MZT)TL1",
    "D8M)T2B",
    "R8X)8YD",
    "F1K)9WC",
    "ZL6)3LX",
    "M6K)KTL",
    "GY6)GYN",
    "V8Q)J88",
    "WHH)STN",
    "XCC)WQK",
    "LGC)5JG",
    "S9G)FDZ",
    "LR8)W6M",
    "FC5)HX2",
    "MBC)M6F",
    "JSX)P3K",
    "K5J)Y9T",
    "ZRC)99H",
    "RGR)HHD",
    "QK2)GYY",
    "Y93)8QK",
    "Z5Z)7VQ",
    "DM6)41X",
    "ZQP)KWZ",
    "T4S)8PB",
    "66B)SGZ",
    "2Z3)L28",
    "CR9)ZTW",
    "79G)MFL",
    "M56)X79",
    "JLJ)CJ9",
    "SD7)JZT",
    "KVS)YSV",
    "K2M)869",
    "BX1)371",
    "F4K)1H2",
    "RZQ)MP3",
    "HX2)GLM",
    "3M6)PY5",
    "YY6)M6G",
    "32F)MWS",
    "1JC)SPG",
    "Y54)GQT",
    "1BN)MBC",
    "7MC)9JV",
    "G35)RTC",
    "38H)J68",
    "CFB)ZLH",
    "YYS)81D",
    "J2H)557",
    "L57)N6J",
    "5YR)LLG",
    "SX4)JN2",
    "PMV)44K",
    "ZH2)XSN",
    "QTJ)V8J",
    "5DZ)VZ5",
    "VYL)165",
    "PR9)W41",
    "NLD)61V",
    "TKD)H4G",
    "45M)H25",
    "9PF)WT5",
    "7FT)YM1",
    "LBT)32F",
    "SJS)224",
    "7NW)874",
    "DXZ)SW2",
    "XR2)SLK",
    "TD9)PC2",
    "1X1)WLM",
    "57Y)C1Y",
    "HCF)3GL",
    "7W2)2BB",
    "5RT)6T7",
    "YLZ)DGZ",
    "MBX)7LN",
    "F9G)MJW",
    "88P)8WS",
    "DRM)HCZ",
    "B7Z)BBH",
    "VD9)LKV",
    "MJW)J9N",
    "JYK)5CF",
    "5FJ)6TR",
    "DG4)QML",
    "MTY)55J",
    "NRM)BX1",
    "CRP)1KL",
    "YHP)JNJ",
    "DPH)N4X",
    "ZLH)FNK",
    "QZ7)JTK",
    "W9Y)4P2",
    "ZCQ)HCF",
    "Y9K)MBX",
    "ZGV)F9G",
    "Z96)W9Y",
    "XQT)YTZ",
    "J88)FPS",
    "8DT)FWK",
    "T88)2L9",
    "FCH)ZCZ",
    "HWZ)7PJ",
    "VW3)P5F",
    "X8G)BW9",
    "GZD)VQ3",
    "SPX)LCT",
    "QK3)7MP",
    "31H)1M3",
    "MR9)RGR",
    "JF6)3PF",
    "7GK)JM7",
    "Y41)QK2",
    "54M)1JC",
    "12D)B2R",
    "X77)ZHD",
    "3D6)5J6",
    "X79)ZRC",
    "3HJ)K1M",
    "W9Y)8PW",
    "H59)YLZ",
    "5YF)Z3M",
    "44V)ZGV",
    "GH9)LPP",
    "QTS)BHF",
    "WM1)8RN",
    "LHN)QSG",
    "YSQ)Y9R",
    "1YK)RYN",
    "JQK)QJ9",
    "JYH)VD9",
    "H84)4KZ",
    "8GC)7W2",
    "63N)QTS",
    "9CK)N89",
    "241)RZQ",
    "DBQ)D4H",
    "MTY)12X",
    "TWS)YRD",
    "83H)5YF",
    "LHN)5CM",
    "683)BPV",
    "SLK)WTG",
    "1N7)9HJ",
    "RKB)TGL",
    "2W5)2FR",
    "K5V)ZTD",
    "MZ7)5KW",
    "N8Y)DBX",
    "BBH)WLH",
    "7C3)F44",
    "M39)69L",
    "LV1)R1N",
    "QSK)PY6",
    "ZWN)CX1",
    "427)MTY",
    "DW7)1RY",
    "ZSQ)R5W",
    "6VT)22N",
    "557)2Y7",
    "QGN)P7Z",
    "F65)NYZ",
    "RJ9)QGN",
    "ZCZ)KJ3",
    "Z1S)PKJ",
    "Y4F)TWS",
    "QH7)ZH2",
    "J8X)P5R",
    "2BB)GF4",
    "726)YP6",
    "YK5)7GZ",
    "LTV)7JD",
    "2NN)1ZW",
    "BVS)9CK",
    "361)FRD",
    "T21)712",
    "LVY)W8C",
    "V39)Z1S",
    "2S6)HQC",
    "RWY)MKM",
    "L28)F97",
    "PNB)B7G",
    "HCZ)HWZ",
    "MHT)RST",
    "34X)9SM",
    "KJ3)79F",
    "K8L)8GC",
    "FRD)9T6",
    "KK5)G2K",
    "82F)KYL",
    "5LB)V8Q",
    "21L)46C",
    "MFR)VKC",
    "HMH)7T2",
    "XK9)CBP",
    "ZK3)X8C",
    "FVD)YKV",
    "JTK)CYN",
    "QDJ)3SS",
    "YNZ)DHZ",
    "F7R)7NW",
    "WLH)2T4",
    "1H2)D68",
    "98G)NLD",
    "959)PMV",
    "KMN)61T",
    "GQT)ZTS",
    "LF3)WHH",
    "3C9)J2X",
    "4K2)BJT",
    "R2K)5SJ",
    "W6M)N8P",
    "BJT)P4X",
    "41X)FS6",
    "MK8)KDB",
    "PJ7)HM1",
    "T5G)MHY",
    "8DT)FCH",
    "F9Y)BPT",
    "W8Q)3DD",
    "YQC)BGH",
    "NWN)C17",
    "MD5)Y1F",
    "MHY)QH7",
    "ZMH)NN8",
    "V32)WTX",
    "FK1)ZJ1",
    "SD7)1TM",
    "1TK)T4P",
    "79F)3S8",
    "C1Y)QTL",
    "ZML)PKM",
    "M3Y)2V5",
    "VQ8)ZMH",
    "S9C)M6K",
    "TKD)544",
    "DL7)K8L",
    "BHF)8BC",
    "WT5)NYF",
    "JD3)GNM",
    "GC3)32M",
    "5CF)XV8",
    "B3S)P5J",
    "5L7)5DV",
    "PGN)3JR",
    "2V5)843",
    "8NQ)RHD",
    "W5N)76Q",
    "GF4)QHF",
    "78B)MHT",
    "JZT)GZD",
    "RWX)FLN",
    "FGG)HN9",
    "MP3)B94",
    "F1C)79B",
    "C3H)7WK",
    "WLH)T21",
    "R5W)7VL",
    "6DS)3S6",
    "QNR)271",
    "Y75)95S",
    "K8V)T4J",
    "2DN)RCV",
    "3G3)34X",
    "84Z)V32",
    "2T4)TWG",
    "S26)814",
    "DPF)D8M",
    "N9D)THZ",
    "8S7)2CC",
    "8CX)CLG",
    "4DZ)RBH",
    "42G)DWS",
    "SFN)LZV",
    "P7Z)LTH",
    "G2K)J2H",
    "2L4)5YZ",
    "6S6)GDR",
    "2CC)MZ7",
    "WNX)T9K",
    "DHZ)LVY",
    "WQK)5WJ",
    "LS1)44V",
    "2XL)2GH",
    "X3D)VTB",
    "5KW)PP1",
    "4BH)V39",
    "STV)ZSQ",
    "83D)PH7",
    "VF9)VH9",
    "S8W)6VB",
    "F4B)Y75",
    "VYG)SFY",
    "KTL)45M",
    "LFL)PS5",
    "MWS)JLY",
    "SH3)39L",
    "9DH)61W",
    "MD4)NK9",
    "49C)2W5",
    "7CL)3TL",
    "CBP)2R4",
    "271)K7T",
    "3TL)5L7",
    "ZM1)ZML",
    "W9T)GBS",
    "6FL)LHN",
    "Z7W)1PB",
    "JNJ)XCC",
    "YTZ)6DS",
    "BST)4BW",
    "SZJ)DKF",
    "PTH)2S6",
    "2VH)361",
    "8BC)Q4B",
    "PSR)7WV",
    "4BB)32V",
    "PQL)TJ5",
    "D3X)TVD",
    "HYC)J8X",
    "ZPF)XXY",
    "1RT)BST",
    "Q3H)Q7C",
    "YVJ)ZWN",
    "XPX)1TK",
    "SJS)YK5",
    "22N)N72",
    "JRN)H84",
    "1T5)MD4",
    "XZG)4ZJ",
    "55J)8C7",
    "N8P)GMJ",
    "PSR)1VN",
    "YQV)FGH",
    "KRT)SZQ",
    "CP5)1N7",
    "Q5F)29K",
    "Q5P)QMF",
    "YP5)726",
    "YW9)4SL",
    "R8P)7ZB",
    "1RY)JF6",
    "ZQZ)R8P",
    "7W2)YHP",
    "2B8)SH3",
    "794)H59",
    "BBJ)27J",
    "VJF)S4R",
    "XPT)RV1",
    "7T2)ZXL",
    "GLM)3BF",
    "32M)SS5",
    "9HJ)JG2",
    "8MY)YKL",
    "QMF)JQJ",
    "PK5)CLP",
    "GYF)WY9",
    "G5C)JGL",
    "JG2)K8V",
    "YQC)79G",
    "4PL)L45",
    "32P)BY1",
    "ZDQ)925",
    "W41)G5P",
    "SM2)P87",
    "NBZ)5FJ",
    "814)KZN",
    "NJK)PNB",
    "FMY)NRM",
    "4VZ)CGG",
    "652)YKK",
    "WVB)BY5",
    "C4N)4R8",
    "9BM)87V",
    "9QT)HKS",
    "N6J)6HK",
    "8PW)B4S",
    "LPP)7NS",
    "HCF)DP8",
    "6DK)MC4",
    "4JV)48C",
    "WYH)JTD",
    "4D2)1SQ",
    "C17)MK8",
    "X77)WSM",
    "XTB)PCT",
    "J47)9X5",
    "3Q3)88P",
    "97J)C92",
    "HP1)HG6",
    "4P2)DW7",
    "843)D3X",
    "THZ)D4Q",
    "F44)36P",
    "P5R)WDY",
    "BZP)PJ7",
    "RDF)48T",
    "R17)7WG",
    "FWK)Y4F",
    "39X)JQD",
    "SY2)BDM",
    "DJN)Y93",
    "KTP)RTM",
    "73W)WNX",
    "935)LBT",
    "N2L)5DZ",
    "L7L)5MS",
    "224)785",
    "FDZ)GNX",
    "F3H)5WR",
    "LPB)YSQ",
    "DBV)Y9K",
    "ZKP)97J",
    "FJW)ZM1",
    "MYD)MM5",
    "COM)HM9",
    "SGZ)Q4Q",
    "NK9)4H2",
    "VM4)5G3",
    "Q7C)FPX",
    "FS6)M56",
    "XBR)N8Y",
    "BDL)SML",
    "YRD)HKR",
    "F7C)PRR",
    "388)RY4",
    "HV3)XBR",
    "M9X)NWN",
    "F27)CYL",
    "WDY)SJS",
    "ZR4)5LY",
    "L7Q)YP5",
    "YRP)DY2",
    "HX3)1SD",
    "R9H)PBD",
    "X8D)W3B",
    "Y41)6FM",
    "Z9F)4TR",
    "MM5)66B",
    "SML)38H",
    "NFN)1KN",
    "4W2)ZLV",
    "BZP)9X1",
    "Q7C)5DY",
    "1TM)HKB",
    "VKX)LWG",
    "FCR)F7F",
    "BY1)5J7",
    "THS)LKP",
    "WQK)C19",
    "17N)Y1T",
    "CKH)L57",
    "78P)NV5",
    "GF2)FGG",
    "FGG)SD1",
    "874)KTP",
    "JRR)CFB",
    "4VC)T3X",
    "DGZ)WZC",
    "1CD)83D",
    "XXY)S26",
    "LKH)JD3",
    "K1M)KK5",
    "8YQ)6V7",
    "TKR)VQ8",
    "N7H)ZZP",
    "R1N)F1C",
    "TPW)R2K",
    "JGL)XNJ",
    "5WJ)72B",
    "62W)ZPF",
    "KNY)C7F",
    "SPG)3PC",
    "FNK)NBZ",
    "HKB)NFK",
    "CJ9)9WW",
    "KWZ)M8G",
    "P28)NVF",
    "6V7)MYD",
    "ZYH)JYD",
    "XQT)VFM",
    "99H)9FJ",
    "4ML)GY6",
    "CP5)WM1",
    "X6P)STV",
    "1SQ)KRT",
    "7JD)J2B",
    "3JZ)F7R",
    "65N)QRK",
    "MW7)TFR",
    "2L9)ZDQ",
    "D4H)F9Y",
    "PS5)WTV",
    "G35)6QC",
    "LTH)9MY",
    "DQJ)2VH",
    "SPB)6HB",
    "L9W)L7L",
    "WNL)83H",
    "34G)JLJ",
    "8SL)H75",
    "JVQ)CKH",
    "165)VW3",
    "X4Q)DBQ",
    "VWR)7YW",
    "T9K)JW4",
    "79G)WYH",
    "S5T)K6R",
    "78P)QRX",
    "GZT)447",
    "3S6)4YH",
    "PCT)57Y",
    "39X)W9T",
    "Y9R)5RT",
    "8C7)DNQ",
    "9WC)MNY",
    "785)SFN",
    "RCV)42G",
    "D1Q)Q5P",
    "C4Y)DG4",
    "72G)78B",
    "XHT)S5T",
    "HX3)WTB",
    "JVC)9NM",
    "KMZ)WVB",
    "HN9)5LB",
    "WTV)JP8",
    "8JP)Z5Z",
    "VTB)WHR",
    "BWP)YTK",
    "PY6)DXZ",
    "5G3)2NN",
    "ZXL)3HJ",
    "3ZD)VKX",
    "4ZJ)8RD",
    "GWX)1FD",
    "WDY)4ML",
    "P4X)3D6",
    "JQJ)34G",
    "KNH)Q81",
    "HPR)SG1",
    "RY4)73V",
    "7ZB)BYD",
    "BPT)ZK3",
    "CLG)G7W",
    "3CF)1D1",
    "B5F)21L",
    "Z4Y)FBV",
    "GM9)JRR",
    "D9M)C7J",
    "B4S)ZKP",
    "P5J)32P",
    "T9K)FK1",
    "HXQ)7LT",
    "MSD)88Z",
    "5P6)JRN",
    "M91)JQK",
    "W82)ZSH",
    "WLM)935",
    "DY2)J81",
    "9XJ)4JZ",
    "N72)VM4",
    "T2B)V7B",
    "M6B)2XL",
    "J77)N5J",
    "9W2)T2J",
    "JFL)Q11",
    "FNK)V15",
    "W8G)QRL",
    "T4J)F5T",
    "G5S)F65",
    "G31)LGC",
    "8YD)6CS",
    "838)TWL",
    "CW4)RDF",
    "46C)GM9",
    "HSX)MTZ",
    "447)RJ9",
    "N4X)25P",
    "9FJ)6S6",
    "W8S)ZVM",
    "NN8)N7H",
    "6T7)M9L",
    "CV8)2L4",
    "ZZP)PYZ",
    "HKR)YXC",
    "C28)6VT",
    "FBV)QPZ",
    "WY9)BXH",
    "JF2)GSK",
    "PYR)195",
    "GD2)KY5",
    "1ZW)BKR",
    "CZL)VX9",
    "C7F)VP1",
    "VFM)CYB",
    "MC6)TZP",
    "C75)9BM",
    "GSQ)LHH",
    "J2X)3K1",
    "7CL)JJ4",
    "RHF)MZT",
    "5DV)3CM",
    "5MR)Z68",
    "6HZ)N2L",
    "D39)HYC",
    "D4Q)DV6",
    "2TB)H3R",
    "673)J27",
    "J81)B5F",
    "1D1)JKT",
    "44K)Y8D",
    "8PB)1T5",
    "C92)QZ7",
    "LW8)4TW",
    "3Q4)SGN",
    "FK1)D9Q",
    "ZSH)PK5",
    "BXL)6HZ",
    "FQ5)T5G",
    "KDB)C75",
    "3HJ)LRZ",
    "VCJ)LV4",
    "G7K)4JV",
    "HMP)54M",
    "7PJ)3Q4",
    "GH2)5R2",
    "B1W)DPH",
    "P6P)1YJ",
    "B9S)3JZ",
    "J1Q)NVV",
    "CQH)BWC",
    "48T)FNP",
    "Z29)86W",
    "NNC)LGY",
    "H3R)DPF",
    "CLP)JKB",
    "LLG)8TM",
    "TQQ)7C3",
    "8N1)XR2",
    "D9Q)B3S",
    "GC3)84Z",
    "QPZ)83Y",
    "5DR)JPT",
    "2BS)M2H",
    "F1T)XQT",
    "KYL)SPB",
    "VP1)Q6F",
    "P2H)NJK",
    "CTS)7VZ",
    "J27)YD4",
    "NRM)Z4Y",
    "RTC)M91",
    "7LT)D39",
    "W95)T88",
    "M6W)691",
    "KP3)BBJ",
    "SZJ)HR2",
    "V8J)88J",
    "8VG)S95",
    "R3K)VWT",
    "ZVM)XZG",
    "9MY)6L2",
    "L59)WGP",
    "5WR)LKH",
    "M9L)D2X",
    "JSF)X8D",
    "RGR)K85",
    "H7X)VJF",
    "7KT)Y26",
    "ZK3)PG9",
    "61V)YQC",
    "NYF)8YQ",
    "ZLV)WT4",
    "9X1)L9W",
    "CQK)GH2",
    "C7J)SD7",
    "FG6)15R",
    "K6R)Z9F",
    "SS5)WT1",
    "9X3)LJN",
    "JVQ)2Z3",
    "4BW)JRC",
    "5LY)XPX",
    "LJ7)D9M",
    "LRZ)PYR",
    "JW4)KT5",
    "HM9)LS1",
    "SG1)XHT",
    "HK8)4G3",
    "L45)KNH",
    "1KF)DJN",
    "KXG)TXP",
    "FPX)2DX",
    "DNQ)4K2",
    "DX6)W46",
    "7GH)3ZD",
    "MK8)5MR",
    "RKB)7DG",
    "QHF)X3D",
    "QJ9)5DR",
    "F97)PQL",
    "X6X)2DN",
    "PRR)ZYH",
    "CJ9)HK8",
    "677)MMP",
    "FRD)R3K",
    "13K)TJJ",
    "3PF)3FQ",
    "FGH)XX5",
    "N8D)9W2",
    "4DP)R9H",
    "3JR)YVJ",
    "B5F)VJB",
    "YTH)PJ2",
    "78M)4VZ",
    "PJ2)C28",
    "5DY)R8X",
    "TPW)HPR",
    "TZP)YW9",
    "JRC)4J5",
    "5SJ)XK9",
    "Y6B)67X",
    "B7G)K5J",
    "BGH)MW7",
    "8JR)T2Z",
    "VX9)HQZ",
    "XM8)B9S",
    "MS5)HLP",
    "9S4)4BH",
    "LFR)K2M",
    "5JG)3SP",
    "J2B)Z7W",
    "X49)TG3",
    "7LN)JPC",
    "GXQ)GS4",
    "6L2)TNX",
    "3FG)BDL",
    "T47)X77",
    "RX9)1X1",
    "GYY)KXG",
    "QS4)M9X",
    "Y26)VM9",
    "RTM)9DM",
    "3HZ)12D",
    "KK2)ZM6",
    "68X)N9D",
    "B7G)3M6",
    "DB3)4LB",
    "2DX)RZ9",
    "C19)CQK",
    "NBB)3HZ",
    "8TM)F3H",
    "WT4)4PL",
    "CZL)JYH",
    "15P)KK2",
    "9MV)DRM",
    "TFR)JVC",
    "ZQ6)TVW",
    "Z7W)DQJ",
    "8MW)QSK",
    "XJH)X8G",
    "P5F)NBB",
    "YQN)YMG",
    "F7F)73W",
    "Y3X)652",
    "HM1)Y41",
    "ZTD)TKR",
    "4YK)13K",
    "95J)1FJ",
    "1FJ)5YR",
    "PW7)534",
    "CX1)MFR",
    "DWS)TPW",
    "LFV)N5F",
    "427)P28",
    "K2Z)CP5",
    "V7B)SY2",
    "N8P)NNC",
    "F44)39X",
    "3FQ)2R9",
    "YXC)DM6",
    "ZTW)9XJ",
    "7WG)2Q8",
    "QTL)M6H",
    "F1K)LRD",
    "3BF)THS",
    "T66)FMY",
    "27J)1RT",
    "1KN)BPD",
    "GNM)9PF",
    "MTZ)QWN",
    "QSG)MF2",
    "8T7)683",
    "Z5Z)8S7",
    "8SH)W4F",
    "XX5)BWP",
    "9DH)KGJ",
    "M9X)6N3",
    "TGL)MR9",
    "MQF)FQ5",
    "TS6)6FL",
    "CYN)6DH",
    "195)SAN",
    "STN)WZL",
    "RBH)M8S",
    "73V)WNL",
    "BPV)HMH",
    "8QK)DBV",
    "WY9)JTV",
    "G7W)9N6",
    "TXP)4BB",
    "PH7)WC6",
    "CGG)1BN",
    "JF6)NNR",
    "5MS)DB3",
    "9SM)965",
    "D8L)916",
    "691)7CL",
    "4G3)8MW",
    "6NJ)T4S",
    "7WK)RX9",
    "JLY)Y5M",
    "DBX)J1K",
    "GBS)F4B",
    "HXQ)CRP",
    "WTX)8VG",
    "WGP)YOU",
    "TVW)G7K",
    "M2H)GKG",
    "65N)722",
    "5J7)XPT",
    "THM)78M",
    "QY3)CZL",
    "9SM)ZR4",
    "P76)W8S",
    "BYD)QTJ",
    "JYD)LW8",
    "4G3)W3G",
    "5R2)QS4",
    "2GH)HZ9",
    "LCT)F1K",
    "WSM)YTH",
    "21L)LR8",
    "HR2)W5N",
    "916)7KT",
    "9TL)7GH",
    "N9L)W8Q",
    "VJB)TD9",
    "FLN)838",
    "1SD)LPB",
    "HKS)49C",
    "88Z)YRJ",
    "CYB)68X",
    "CH7)JYK",
    "XV8)4YK",
    "PXJ)SM2",
    "2Q8)8T7",
    "6QC)G9M",
    "BVL)6DK",
    "J1K)FC5",
    "W3B)4DZ",
    "4TW)YQN",
    "HLP)8JP",
    "M8S)S76",
    "YD4)Q5F",
    "48T)GWX",
    "PKM)4W2",
    "86W)FG2",
    "JTD)JSF",
    "VJB)B7Z",
    "ZM6)P2H",
    "G9M)TKD",
    "ZQP)8XQ",
    "TWG)PXJ",
    "8XQ)3Q3",
    "GG4)ZQZ",
    "W4F)FVD",
    "WT1)673",
    "5CM)4D2",
    "K7T)24J",
    "9HJ)8SH",
    "Q6F)VYL",
    "8RD)78P",
    "JG2)6RC",
    "Q6F)BKL",
    "T2Z)KMZ",
    "LR8)KMN",
    "GKG)38F",
    "XT5)8CX",
    "FG2)VCJ",
    "V15)9MV",
    "GBS)4VC",
    "M6G)TQQ",
    "J9N)QDJ",
    "MF2)BVS",
    "BX1)C4Y",
    "1M3)95J",
    "J97)7GK",
    "VWT)PGN",
    "S9G)72G",
    "87D)B1W",
    "PYZ)F1T",
    "ZCZ)W82",
    "WHR)CRV",
    "7GK)63N",
    "JN2)RRG",
    "QRX)HMP",
    "4VR)ZCQ",
    "V8Q)GMP",
    "SFG)RXQ",
    "39L)G35",
    "WZL)DSH",
    "TWL)MSD"];

const finder = function (text, tableF) {
    var final = text;
    while (final.substr(0, 3) != 'COM') {
        const cos = add(final, tableF);
        final = cos + final;
    }
    return final;
};

const add = function (word, tableA) {
    const word2 = word.substr(0, 3);
    if (word2 == "Z") {
        return "";
    } else {
        return tableA.find(el => el.substr(4, 3) == word2);
    }
};

const final = data.map(x => finder(x, data));
const wynik = final.reduce(((acc, curr) => acc + curr.length / 7), 0);
console.log(wynik);

const you = final.find(el => el.substr(el.length - 3, 3) === "YOU");
const santa = final.find(el => el.substr(el.length - 3, 3) === "SAN");

function orbits(you, santa) {
    for (let i = 0; i < 1000; i++) {
        if (you.charAt(i) !== santa.charAt(i)) {
            return i;
        }
    }
}

const both = orbits(you, santa) - 4;
console.log((santa.length - both + you.length - both) / 7 - 2);

*/






